package com.university.validator;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.university.model.impl.Student;
import com.university.querybuilder.QueryBuilder;

public class RegistrationValidator {

	private List<Student> records;
	private Map<String, String> errorBag = new LinkedHashMap<>();
	
	public RegistrationValidator() {}
		
	/**
	 * 새로 등록하려는 학생의 정보를 예외처리 합니다.
	 * Student 객체의 각 필드 값에 따라 해당하는 메소드로 올바른 값의 유무를 결정합니다.
	 * 
	 * 예외를 발생시틸 때마다 errorBag 맵이 예외를 담으며 이 메소드의 실행이 끝났을 때
	 * errorBag의 크기를 반환합니.
	 * 
	 * @param requestParams register_student.html 파일에서 받은 인자 값들
	 * @return 				해당 정보가 올바르게 입력되었는지 나타내는 boolean 변수
	 * @throws 				NoSuchFieldException
	 */
	public boolean validate(Map<String, String> requestParams) throws NoSuchFieldException {
		getStudentRecords(requestParams);
		
		for (Map.Entry<String, String> entry : requestParams.entrySet()) {
			String field = entry.getKey();
			String value = entry.getValue();
			
			switch(field) {
				case "studentId":
					if (!validateStudentId(value)) return false;
					break;
				
				case "name":
					if (!validateName(value)) return false;
					break;
				
				case "major":
					if (!validateMajor(value)) return false;
					break;
				
				case "phoneNumber":
					if (!validatePhoneNumber(value)) return false;
					break;
				
				default:
					throw new NoSuchFieldException("No such field exists!");
			}
		}
		
		return errorBag.isEmpty();
	}
	
	/**
	 * 등록할 학생의 학번을 예외처리하는 메소드입니다.
	 * 다음과 같은 상황일 때 errorBag 맵에 에러 사항들을 넣습니다.
	 * 
	 * - 해당 값이 비어있거나 null인 상태
	 * - 숫자 10자리가 아닌 경우
	 * - 중복된 학번이 입력된 경우
	 * 
	 * @param value 사용자로부터 받은 학번
	 * @return		올바른 형식의 학번인지의 boolean 표현 (errorBag의 크기로 가늠합니다)
	 */
	private boolean validateStudentId(String value) {
		// Not Null Integrity
		if (value == null || value.equals("")) {
			errorBag.put("NullStudentIdException", "학번을 입력해주세요.");
		}
		
		// Check for Valid Number Format (10 digits)
		if (!value.matches("\\d{10}")) {
			errorBag.put("InvalidStudentIdException", "학번은 숫자 10자리로 입력해주세요.");
		}
		
		try {
			long testNumber = Long.parseLong(value);
		} catch (NumberFormatException nfe) {
			errorBag.put("InvalidStudentIdException", "학번은 숫자 10자리로 입력해주세요");
		}
		
		// Unique Constraint
		for (Student record : records) {
			if (record.getField("studentId").equals(value)) {
				errorBag.put("DuplicateStudentIdException", "이미 존재하는 학번입니다. 다시 입력해주세요.");
			}
		}
		
		return errorBag.isEmpty();
	}
	
	/**
	 * 등록할 학생의 이름이 올바른 형식인지 판단합니다.
	 * 
	 * 아래와 같은 상황일 때 예외처리를 합니다.
	 * 
	 * - 이름 값이 비어있거나 null 상태일 때
	 * - 이름의 길이가 2글자 미만 7글자 초과일 때
	 * - 이름이 한글이 아닐 때 
	 * 
	 * @param value
	 * @return
	 */
	private boolean validateName(String value) {
		if (value.equals("")) {
			errorBag.put("NullException", "이름을 입력해주세요.");
		}
		
		if (value.length() < 2 && value.length() >= 8) {
			errorBag.put("InvalidNameFormatException", "이름은 2글자에서 7글자 사이로 입력해주세요.");
		}
		
		String namePattern = "^[가-힣]{2,7}$";
		if (!value.matches(namePattern)) {
			errorBag.put("NonKoreanNameException", "이름은 한글로 2글자에서 7글자 사이로 입력해주세요.");
		}
		
		return errorBag.isEmpty();
	}
	
	private boolean validateMajor(String value) {
		if (value.equals("")) {
			errorBag.put("NullException", "학과명을 입력해주세요.");
		}
		
		String majorPattern = "^[가-힣]+학과$";
		if (!value.matches(majorPattern)) {
			errorBag.put("InvalidMajorException", "학과명은 반드시 '학과'로 끝나야합니다. 다시 입력해주세요.");
		}
		
		return errorBag.isEmpty();
	}
	
	private boolean validatePhoneNumber(String value) {
		if (value.equals("")) {
			errorBag.put("NullException", "전화번호를 입력해주세요.");
		}
		
		String phoneNumberPattern = "010-\\d{4}-\\d{4}";
		if (!value.matches(phoneNumberPattern)) {
			errorBag.put("InvalidPhoneNumberException", "전화번호는 010-XXXX-XXXX 형식으로 입력해주세요.");
		}
		
		for (Student record : records) {
			if (record.getField("phoneNumber").equals(value)) {
				errorBag.put("DuplicatePhoneNumberException", "이미 존재하는 전화번호입니다. 다시 입력해주세요.");
			}
		}
		
		return errorBag.isEmpty();
	}
	
	private void getStudentRecords(Map<String, String> params){
		String[] columns = params.keySet().stream().toArray(String[]::new);
		this.records = new QueryBuilder(Student.class).select(columns).getAll();
	}
	
	public Map<String, String> getErrorBag(){
		return this.errorBag;
	}
	
	public void clearErrorbag() {
		this.errorBag.clear();
	}
}
