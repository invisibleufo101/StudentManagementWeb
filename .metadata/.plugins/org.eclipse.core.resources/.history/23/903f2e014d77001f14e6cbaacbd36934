package com.university.service;

import java.util.List;

import com.university.model.impl.Student;
import com.university.querybuilder.QueryBuilder;

public class StudentService {

	private QueryBuilder queryBuilder = new QueryBuilder(Student.class);
	
	public StudentService() {}
	
	/**
	 * 현재 student 테이블이 가지고 있는 모든 학생들을 출력합니다.
	 * 
	 * @param searchStudentId 학생 명단에 학번으로 학생 검색 기능을 구현하기 위한 조건 
	 * @return
	 */
	public List<Student> getAllStudents(String searchStudentId) {
		List<Student> students = queryBuilder.select("*").whereLike("studentId", searchStudentId + "%").getAll();
		return students;
	}
	
	/**
	 * id 항목의 값을 바탕으로 특정한 학생을 검색합니다.
	 * 
	 * @param id Student 테이블에 있는 기본키 
	 * @return	 검색하려는 Student 객
	 */
	public Student getStudent(Long id) {
		Student student = queryBuilder.select("*").where("id", id).get();
		return student;
	}
	
	/**
	 * 인자 값으로 받은 Student 객체의 정보를 바탕으로 student 데이터베이스 테이블에 새로운 행을 하나 추가합니다.
	 * 
	 * @param student 테이블에 추가할 데이터를 가지고 있는 Student 객체
	 */
	public void createStudent(Student student) {
		String studentId = (String) student.getField("studentId");
		String name = (String) student.getField("name");
		String major = (String) student.getField("major");
		String phoneNumber = (String) student.getField("phoneNumber");
		
		queryBuilder.insert("studentId", "name", "major", "phoneNumber").values(studentId, name, major, phoneNumber).execute();
	}
	
	public void updateStudent(Student student) {
		Long id = (Long) student.getField("id");
		String major = (String) student.getField("major");
		String phoneNumber = (String) student.getField("phoneNumber");
		
		queryBuilder.update().set("major", major).set("phoneNumber", phoneNumber).where("id", id).execute();
	}
	
	public void deleteStudent(Long id) {
		queryBuilder.delete().where("id", id).execute();
	}
	
	public void searchStudents(String searchId) {
		
	}
}
