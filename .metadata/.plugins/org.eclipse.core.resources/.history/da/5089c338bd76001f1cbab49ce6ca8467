package com.university.validation;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.university.model.impl.Student;
import com.university.querybuilder.QueryBuilder;

public class StudentValidator {

	private List<Student> records;
	private Map<String, String> errorBag = new HashMap<>();
	
	public StudentValidator() {}
	
//	Field : studentId
//	Value : 2017199083
//	
//	Field : name
//	Value : 하승우
//
//	Field : major
//	Value : 나노과학공학과
//	
//	Field : phoneNumber
//	Value : 010-8255-3057

	
	public boolean validate(Map<String, String> requestParams) {		
		getStudentRecords(requestParams);
		
		for (Map.Entry<String, String> entry : requestParams.entrySet()) {
			String field = entry.getKey();
			String value = entry.getValue();
			
			if (field == "studentId" && !validateStudentId(value)) {
				return false;
			} 
			
			if (field == "name" && !validateName(value)) {
				return false;
			}
			
			if (field == "major" && !validateMajor(value)) {
				return false;
			}
			
			if (field == "phoneNumber" && !validatePhoneNumber(value)) {
				return false;
			}
		}
		
		if (errorBag.isEmpty()) {			
			return true;
		}
		
		return false;
	}
	
	private boolean validateStudentId(String value) {
		// Not Null Integrity
		if (value == null) {
			errorBag.put("NullException", "학번을 입력해주세요.");
			return false;
		}
		
		if (!value.matches("\\d{10}")) {
			errorBag.put("NumberFormatException", "학번은 숫자 10자리로 입력해주세요.");
		}
		
		if (value != null && value.matches("\\d{10}")) {
			try {
				long testNumber = Long.parseLong(value);
			} catch (NumberFormatException nfe) {
				return false;
			}
		}
		
		// Unique Constraint
		for (Student record : records) {
			if (record.getField("studentId") == value) {
				return false;
			}
		}
		return true;
	}
	
	private boolean validateName(String value) {
		if (value.length() < 2 && value.length() >= 8) {
			return false;
		}
		
		if ()
		return true;
	}
	
	private boolean validateMajor(String value) {
		
		return true;
	}
	
	private boolean validatePhoneNumber(String value) {
		
		return true;
	}
	
	private void getStudentRecords(Map<String, String> params){
		String[] columns = params.keySet().stream().toArray(String[]::new);
		this.records = new QueryBuilder(Student.class).select(columns).getAll();
	}
	
	public Map<String, String> getErrorBag(){
		return errorBag;
	}
}
