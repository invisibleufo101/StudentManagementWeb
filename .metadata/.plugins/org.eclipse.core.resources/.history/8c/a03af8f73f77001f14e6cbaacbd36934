package com.university.querybuilder;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.university.model.Model;

public class QueryBuilder {

	private Class<? extends Model> modelClass;
	private String table;
	private QueryExecutor queryExecutor;
	private StringBuilder query = new StringBuilder();
	private List<Object> parameters = new ArrayList<>();

	public QueryBuilder(Class<? extends Model> modelClass) {
		this.modelClass = modelClass;
		this.table = setTableName(modelClass);
		this.queryExecutor = new QueryExecutor();
	}

	// Extracts the table name from Model.class
	private String setTableName(Class<? extends Model> modelClass) {
		try {
			Object modelInstance = modelClass.getDeclaredConstructor().newInstance();
			Method getTableMethod = modelClass.getMethod("getTable");
			String tableName = (String) getTableMethod.invoke(modelInstance);
			return tableName;
		} catch (InstantiationException | IllegalAccessException | IllegalArgumentException | InvocationTargetException
				| NoSuchMethodException | SecurityException e) {
			e.printStackTrace();
			return null;
		}
	}

	public QueryBuilder select(String... columns) {
		columns = Arrays.stream(columns).map(this::camelCaseToSnakeCase).toArray(String[]::new);
		String selectColumns = String.join(", ", columns);

		this.query.append("SELECT ").append(selectColumns).append(" FROM ").append(this.table);

		return this;
	}

	public QueryBuilder select() {
		this.query.append("SELECT * FROM ").append(this.table);

		return this;
	}

	// Insert only certain columns
	public QueryBuilder insert(String... columns) {
		columns = Arrays.stream(columns).map(this::camelCaseToSnakeCase).toArray(String[]::new);
		String insertColumns = String.join(", ", columns);

		this.query.append("INSERT INTO ").append(this.table).append("( ").append(insertColumns).append(") ");

		return this;
	}

	// Insert ALL columns
	public QueryBuilder insert() {
		this.query.append("INSERT INTO ").append(this.table).append(" ");

		return this;
	}

	public QueryBuilder update() {
		this.query.append("UPDATE ").append(this.table).append(" ");

		return this;
	}

	public QueryBuilder delete() {
		this.query.append("DELETE FROM ").append(this.table).append(" ");

		return this;
	}

	// Made this becuase it might be useful for Subqueries and Joins
	// But idk.. Might delete this later
	public QueryBuilder from(String tableName) {
		this.query.append(" FROM ").append(tableName).append(" ");

		return this;
	}

	// Keyword for INSERT clause
	public QueryBuilder values(Object... values) {
		String valueParameters = String.join(", ", Collections.nCopies(values.length, "?"));

		this.query.append("VALUES (").append(valueParameters).append(")");

		this.parameters.addAll(Arrays.asList(values));

		return this;
	}

	// Keyword for UPDATE clause
	public QueryBuilder set(String column, Object value) {
		column = camelCaseToSnakeCase(column);
		// Check if SET clause was used before so that we can decide to add a comma or
		// not
		// ex) SET param = ?, param2 = ?
		if (this.query.toString().contains("SET")) {
			this.query.append(", ");
		} else {
			this.query.append("SET ");
		}

		this.query.append(column).append(" = ?");
		this.parameters.add(value);

		return this;
	}

	// Possible operands: =, <, >, >=, <=, !=, ^=, <>, etc
	// You get the point.
	// On a second thought I think you can also use this like: ("column", "IS",
	// NULL) ? <- need to test
	public QueryBuilder where(String column, String operand, Object value) {
		column = camelCaseToSnakeCase(column);
		this.query.append(" WHERE ").append(column).append(" ").append(operand).append(" ? ");

		this.parameters.add(value);

		return this;
	}

	// Overloaded WHERE clause method.
	// Assuming that the equals sign (=) is probably going to get used a lot.
	public QueryBuilder where(String column, Object value) {
		column = camelCaseToSnakeCase(column);
		this.query.append(" WHERE ").append(column).append(" = ?");

		this.parameters.add(value);
		return this;
	}

	public QueryBuilder whereNot(String column, Object value) {
		column = camelCaseToSnakeCase(column);
		this.query.append(" WHERE NOT ").append(column).append(" = ? ");

		this.parameters.add(value);
		return this;
	}

	public QueryBuilder whereLike(String column, String expression) {
		column = camelCaseToSnakeCase(column);
		this.query.append(" WHERE ").append(column).append(" LIKE '").append(expression).append("' ");

		return this;
	}

	public QueryBuilder whereIn(String column, Object... values) {
		column = camelCaseToSnakeCase(column);
		String valueParameters = String.join(", ", Collections.nCopies(values.length, "?"));

		this.query.append(" WHERE ").append(column).append(" IN (").append(valueParameters).append(") ");

		this.parameters.add(Arrays.asList(values));
		return this;
	}

	public QueryBuilder or(String column, String operand, Object value) throws SQLException {
		column = camelCaseToSnakeCase(column);
		this.query.append(" OR ").append(column).append(" ").append(operand).append(" ? ");

		this.parameters.add(value);

		return this;
	}

	public QueryBuilder or(String column, Object value) throws SQLException {
		column = camelCaseToSnakeCase(column);
		this.query.append(" OR ").append(column).append(" = ? ");

		this.parameters.add(value);

		return this;
	}

	public QueryBuilder and(String column, String operand, Object value) throws SQLException {
		column = camelCaseToSnakeCase(column);
		this.query.append(" AND ").append(column).append(" ").append(operand).append(" ? ");

		this.parameters.add(value);

		return this;
	}

	public QueryBuilder and(String column, Object value) throws SQLException {
		column = camelCaseToSnakeCase(column);
		this.query.append(" AND ").append(column).append(" = ? ");

		this.parameters.add(value);

		return this;
	}

	// Fetch ALL records
	@SuppressWarnings("unchecked")
	public <T extends Model> List<T> getAll() {
		String queryString = this.query.toString();
		List<Object> resultParameters = this.parameters;

		List<T> results = (List<T>) this.queryExecutor.fetchResults(queryString, resultParameters, this.modelClass);

		clearQuery();
		
		System.out.println(this.query.toString());
		
		return results;
	}

	// Fetch a single record
	public <T extends Model> T get() {
		this.query.append(" FETCH FIRST 1 ROWS ONLY ");
		String queryString = this.query.toString();
		List<Object> resultParameters = this.parameters;

		T result = this.queryExecutor.fetchResult(queryString, resultParameters, this.modelClass);

		clearQuery();
		return result;
	}

	// Execute INSERT, UPDATE, DELETE commands
	public void execute() {
		String queryString = this.query.toString();
		List<Object> resultParameters = this.parameters;

		this.queryExecutor.execute(queryString, resultParameters, modelClass);

		clearQuery();
	}

	/**
	 * 쿼리 하나를 실행하고 나서 QueryBuilder 객체가 가지고 있던 인자 값들을 해제 시키는 메소드입니다.
	 * 
	 * @return void
	 */
	private void clearQuery() {
		this.query.setLength(0);
		this.parameters.clear();
	}
	
	
	// This method is for User convenience. We are too lazy to remember where the underscores are supposed to be. 
	// What this method does is it converts the parameter string from QueryBuilder Methods 
	/**
	 *  QueryBuilder 객체의 메소드를 쓰는 사용자 편의성을 위해 만들었습니다. 
	 *  데이터베이스에 객체의 이름을 snake_case로 쓰는 것이 일반적이지만 자바에서는 camelCase가 표준입니다. 
	 *  그러므로 snake_case의 underscore("_")가 어딨는지 일일히 기억해야되는 것은 꽤나 불편합니다.
	 *  
	 *  그래서 chatGPT의 도움으로 자동으로 camelCase 표기법을 snake_case로 변환하는 메소드를 만들었습니다.
	 * @param camelCase
	 * @return
	 */
	private String camelCaseToSnakeCase(String camelCase) {
        String snake_case = camelCase.replaceAll("([a-z])([A-Z])", "$1_$2").toLowerCase(); // Code provided by ChatGPT
        return snake_case;
    }

}
