package com.university.validation;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.university.model.impl.Student;
import com.university.querybuilder.QueryBuilder;

public class StudentValidator {

	private List<Student> records;
	private Map<String, String> errorBag = new HashMap<>();
	
	public StudentValidator() {}
		
	public boolean validate(Map<String, String> requestParams) {		
		getStudentRecords(requestParams);
		
		for (Map.Entry<String, String> entry : requestParams.entrySet()) {
			String field = entry.getKey();
			String value = entry.getValue();
			
			if (field == "studentId" && !validateStudentId(value)) {
				return false;
			} 
			
			if (field == "name" && !validateName(value)) {
				return false;
			}
			
			if (field == "major" && !validateMajor(value)) {
				return false;
			}
			
			if (field == "phoneNumber" && !validatePhoneNumber(value)) {
				return false;
			}
		}
		
		if (errorBag.isEmpty()) {			
			return true;
		}
		
		return false;
	}
	
	private boolean validateStudentId(String value) {
		// Not Null Integrity
		if (value == null) {
			errorBag.put("NullStudentIdException", "학번을 입력해주세요.");
			return false;
		}
		
		// Check for Valid Number Format (10 digits)
		if (!value.matches("\\d{10}")) {
			errorBag.put("InvalidStudentIdException", "학번은 숫자 10자리로 입력해주세요.");
		}
		
		try {
			long testNumber = Long.parseLong(value);
		} catch (NumberFormatException nfe) {
			errorBag.put("InvalidStudentIdException", "학번은 숫자 10자리로 입력해주세요");
			return false;
		}
		
		// Unique Constraint
		for (Student record : records) {
			if (record.getField("studentId") == value) {
				errorBag.put("DuplicateStudentIdException", "중복된 학번입니다. 다시 입력해주세요.");
				return false;
			}
		}
		
		return true;
	}
	
	private boolean validateName(String value) {
		if (value.length() < 2 && value.length() >= 8) {
			errorBag.put("InvalidNameFormatException", "이름은 2글자에서 7글자 사이로 입력해주세요.");
			return false;
		}
		
		String namePattern = "^[가-힣]{2,7}$";
		if (!value.matches(namePattern)) {
			errorBag.put("NonKoreanNameException", "이름은 한글로 2글자에서 7글자 사이로 입력해주세요.");
			return false;
		}
		
		return true;
	}
	
	private boolean validateMajor(String value) {
		String majorPattern = "^[가-힣]+학과$";
		if (!value.matches(majorPattern)) {
			errorBag.put("InvalidMajorException", "학과명은 반드시 '학과'로 끝나야합니다. 다시 입력해주세요.");
			return false;
		}
		
		return true;
	}
	
	private boolean validatePhoneNumber(String value) {
		String phoneNumberPattern = "010-\\d{4}-\\d{4}";
		if (!value.matches(phoneNumberPattern)) {
			errorBag.put("InvalidPhoneNumberException", "전화번호는 010-XXXX-XXXX 형식으로 입력해주세요.");
			return false;
		}
		
		return true;
	}
	
	private void getStudentRecords(Map<String, String> params){
		String[] columns = params.keySet().stream().toArray(String[]::new);
		this.records = new QueryBuilder(Student.class).select(columns).getAll();
	}
	
	public Map<String, String> getErrorBag(){
		return errorBag;
	}
}
