package com.university.model;

import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.Map;

public class FieldHandler {
	
	private Object model;
	private Map<String, Field> fieldMap;
	
	public FieldHandler(Object model) {
		this.model = model;
		this.fieldMap = getFieldMap(model);
	}
	
	public void setField(String column, Object value) {
		try {
			Field field = fieldMap.get(column.toLowerCase());
			if (field == null) {
				throw new NoSuchFieldException("Field name: " + column + " does not exist!");
			}
			
			field.setAccessible(true);
			Object castedValue = TypeCastHandler.convertToFieldType(field, value);
			field.set(model, castedValue);
		} catch (NoSuchFieldException | IllegalAccessException e) {
			e.printStackTrace();
		}
	}
	
	public Object getField(String column) {
        try {
            Field field = fieldMap.get(column.toLowerCase());
            if (field == null) {
                throw new NoSuchFieldException("Invalid field name!");
            }
            field.setAccessible(true);
            return field.get(model);
        } catch (NoSuchFieldException | IllegalAccessException e) {
            e.printStackTrace();
            return null;
        }
    }
	
	// Map the declared fields of inherited classes
	// Key => Column Name (lowercase)
	// Value => Field object
	private Map<String, Field> getFieldMap(Object model){
		Map<String, Field> fieldMap = new HashMap<>();
		Field[] fields = model.getClass().getDeclaredFields();
		for (Field field : fields) {
			field.setAccessible(true);
			fieldMap.put(field.getName().toLowerCase(), field);
		}
		return fieldMap;
	}
	
//	private void validateField() {
//		
//	}
}

